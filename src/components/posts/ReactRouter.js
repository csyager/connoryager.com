import reactrouterlogoImage from '../../images/posts/reactrouterlogo.png';
import reactdefaultImage from '../../images/posts/reactdefault.png';

function ReactPost() {
    return (
        <div className="post-content">
            <h1 className="display-4">Configuring Routing in a React App with react-router</h1>
            <h5 className="text-muted">Apr 25, 2021</h5><br />
            
            <div className="post-header-img">
                <img src={reactrouterlogoImage} alt="react-router" className="img-fluid" />
            </div>

            <p className="post-body">If you've ever transitioned a site from standard HTML into a React project, you've probably been thrown by the fact that React uses a single-page application model.  This means that the entire application exists within a single index location, with React handling changes of state by essentially hiding and showing the many components that make up the application.  This works great in many situations, but what if you want the ability to deep-link a user into a certain state of your application?  Typing an address into your browser's address bar, for example, won't do anything to affect the state of the application by default.  The user will be presented with the standard starting point of your application.  Take this blog, for example, which is hosted using React.  If I wanted to send a reader a link to a particular post, the user would just be thrown back to my home page.  Not a great situation for a blog.  Fortunately, the react-router project has a solution.  react-router provides navigational tools to implement basic routing for your application.</p>
            <p>This tutorial assumes that you bootstrapped your React app with create-react-app, and that you have Node installed.  Let's get started!</p>
            <hr />
            <h2>Getting started</h2>
            <p>First things first, let's install react-router-dom.  This library works for web-based React applications, and is hosted on the public npm registry.  That makes things pretty easy!  From your command line, run <code className="inline">npm install react-router-dom</code>.  This will install the necessary tools to use react-router.</p>
            <p>Next, we want to include it in our application.  At the top of App.js, include the following code:</p>
            <pre><code>
{`import {
    BrowserRouter as Router,
    Switch,
    Route,
    Link
} from "react-router-dom;"
`}</code></pre>
            <p>These are the primary components that react-router relies on.  Now that we've included them, we can start setting up the structure of our application.</p>
            <hr />
            <h2>Creating the router</h2>
            <p>Let's suppose for this blog that we want to use the standard index generated by create-react-app as our home page.  Underneath the <code className="inline">&lt;div&gt; className="App"&lt;div&gt;</code> line, insert a Router and enclosed Switch tag, and finally a Route tag with the path attribute set to "/", and enclose the rest of the code that was in the division tag as children of the Route tag, so that your file structure looks like this:</p>
            <pre><code>
{`function App() {
  return (
    <div className="App">
      <Router>
        <Switch>
          <Route path="/">
          <header className="App-header">
            <img src={logo} className="App-logo" alt="logo" />
            <p>
              Edit <code className="inline">src/App.js</code> and save to reload.
            </p>
            <a
              className="App-link"
              href="https://reactjs.org"
              target="_blank"
              rel="noopener noreferrer"
            >
              Learn React
            </a>
          </header>
          </Route>
        </Switch>
      </Router>
      
    </div>
  );
}
`}</code></pre>
        <p>This sets the content within the Route tag to map to the "/" or index path.  Run <code className="inline">npm start</code> to start the development server, and navigate to <code className="inline">http://localhost:3000</code>, and you should see the default React page.</p>
        <img src={reactdefaultImage} alt="react default page" className="img-fluid"/>
        <p>This means that react-router is successfully mapping our index page to the react default page.  If you try putting in a different path in the address bar, for example <code className="inline">http://localhost:3000/foo/bar</code>, you'll notice that the index page is still served.  We can change this configuration later if you would prefer to throw a 404 response, but this can also be a useful configuration if you would prefer to direct users to your home page.</p>
        <hr />
        <h2>Configuring additional routes</h2>
        <p>Let's add a second route to our configuration.  An important thing to note with react-router is that when we're configuring routes, we need to start at the most specific and then work our way down to the least specific.  For example, we would want to order the routes <code className="inline">/</code>, <code className="inline">/foo</code>, and <code className="inline">/foo/bar</code> like this:</p>
        <ol>
            <li><code className="inline">/foo/bar</code></li>
            <li><code className="inline">/foo</code></li>
            <li><code className="inline">/</code></li>
        </ol>
        <p>So let's say that we wanted to configure a route for <code className="inline">/test</code> to serve just a header that says test.  Add another <code className="inline">&lt;Route&gt;</code> tag with a path attribute <code className="inline">/test</code>, and the header tag as a child element, like so:</p>
        <pre><code>
{`function App() {
  return (
    <div className="App">
      <Router>
        <Switch>
          <Route path="/test">
            <h1>Test</h1>
          </Route>
          <Route path="/">
          <header className="App-header">
            <img src={logo} className="App-logo" alt="logo" />
            <p>
              Edit <code className="inline">src/App.js</code> and save to reload.
            </p>
            <a
              className="App-link"
              href="https://reactjs.org"
              target="_blank"
              rel="noopener noreferrer"
            >
              Learn React
            </a>
          </header>
          </Route>
        </Switch>
      </Router>
      
    </div>
  );
}
`}            
        </code></pre>
        <p>Now when you navigate to <code className="inline">http://localhost:3000/test</code>, you should see "test" displayed as a header.  Notice that if you try navigating to <code className="inline">http://localhost:3000/test/foo/bar</code>, the test page is still served.</p>
        <hr />
        <h2>react-router Links</h2>
        <p>react-router comes with a Link component, which can be used for navigating between pages.  Whereas in a simple HTML site you might navigate between pages using <code className="inline">&lt;a&gt;</code> tags, this won't work with the way that react-router maintains state.  Let's try replacing the link at the bottom of the default react page with a react-router link to the test page we just created.  In the Route component for the "/" route, replace the <code className="inline">&lt;a&gt;</code> tag with a Link tag, and set the "to" attribute to "/test", like so (the style attribute is included just to make it show up better on the page):</p>
        <pre><code>
{`function App() {
  return (
    <div className="App">
      <Router>
        <Switch>
          <Route path="/test">
            <h1>Test</h1>
          </Route>
          <Route path="/">
          <header className="App-header">
            <img src={logo} className="App-logo" alt="logo" />
            <p>
              Edit <code className="inline">src/App.js</code> and save to reload.
            </p>
            <Link to="/test" style={{color:"white"}}>Click here to visit test page!</Link>
          </header>
          </Route>
        </Switch>
      </Router>
      
    </div>
  );
}`}
        </code></pre>
        <p>Now when you visit the index path, you should see the link appear at the bottom of the page.  Clicking it will take you to the <code className="inline">http://localhost:3000/test</code> path!</p>
        <hr />
        <h2>A quick navbar tip for applying "active" styles</h2>
        <p>Odds are, if you're using the Link component you're interested in creating some sort of navigation component, like a navbar.  When I went through these steps, I wanted to style my navbar so that the current page would apply an active CSS class, and would be styled slightly differently.  It isn't immediately apparent how this could be done.  Fortunately, react-router comes with a function called <code className="inline">useLocation</code> that can get the current route.  By extending the Link component, we can apply styles to a link based on the currently selected route.  In the file containing your navbar component, import the useLocation function like so:</p>
        <pre><code>
{`import { useLocation } from 'react-router-dom';
`}        
        </code></pre>
        <p>Now, let's define a component that I'll call NavLink that returns a Link component with the correct classes applied.  We can create a boolean variable that checks if the "to" property is equal to the current pathname, and then programmatically set the className attribute of the returned component to include "active" if it is.  Define this component like so:</p>
        <pre><code>
{`function NavLink(props) {
    var isActive = useLocation()["pathname"] === props.to;
    var className = isActive ? 'nav-link active' : 'nav-link';
    return(
        <Link className={className} {...props}>
            {props.children}
        </Link>
    );
}`}
        </code></pre>
        <p>Now when we want to use a Link component, replace it with the NavLink component with the standard "to" property, and the links will have the "active" class applied if the current route is in their "to" property.</p>

        <hr />
        <h2>What about server-side routing?</h2>
        <p>An important thing to note about react-router is that it, like most things React, is running on the client-side.  It gives the illusion of serving multiple pages by determining application state based on the address, but it isn't really serving multiple endpoints.  This becomes a bit of a problem if you're serving the application via a static file store (I actually wrote a post about how to do this on Amazon S3 <a href="http://localhost:3000/#/posts/reactapps3">here</a> if that's something you're looking for).  The BrowserRouter works fine if users are hitting your index page only, but if a user needs to be routed to a specific page, or even if a user tries to refresh the page when they're not on the index, the request will fail because it's being sent to a server that only knows how to serve the index.</p>
        <p>Fortunately, react-router has a solution for this, called the HashRouter.  This component works by appending a "/#/" to any route automatically, causing the server to ignore anything that comes after the #, while react-router continues to handle the rest.  It's also pretty easy to implement!  Wherever you've been doing your routing, replace the BrowserRouter import with a HashRouter import, and you're good to go!  Here's an example, notice that the import is HashRouter instead of BrowserRouter like we configured it before:</p>
        <pre><code>
{`import {
  HashRouter as Router,
  Switch,
  Route,
} from "react-router-dom";`}    
        </code></pre>
        <p>Now, even if you're using a static file store to serve the application, users can be deep linked to a page on your app.  Try typing <code className="inline">http://localhost:3000/#/test</code> into your address bar, to verify that it's working.</p>

        <hr />
        <h2>Conclusion</h2>
        <p>As you can see, react-router is a powerful tool for making a single-page application feel more like it's multi-page.  If you'd prefer to really handle routing on the server-side, there are ways around the limitations of React, but it will likely involve more in-depth configuration of the server or static file store, and may not be supported.  Hopefully you've found this tutorial to be helpful and informative.  Happy hacking!</p>

        </div>
        
    );
}

export default ReactPost;